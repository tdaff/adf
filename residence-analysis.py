#!/usr/bin/env python

"""

Take the output generated by residence.py and transform it into useful
data.

"""
import matplotlib.pyplot as plt
import math
import sys
import os
import os.path


#Not done yet.
def create_histogram_figure(data, angle_bins, plot_name):
    """
    Creates png file of a histogram plot.
    """
    # the histogram of the data
    n, bins, patches = plt.hist(x, bins, normed=1, facecolor='green', alpha=0.5)
    # add a 'best fit' line
#    plt.plot(bins, y, 'r--')
#    plt.xlabel('Angle bins (degrees)')
#    plt.ylabel('Frequency')
#    plt.title(plot_name)
#    plt.savefig('%s.png' % plot_name)

# Tweak spacing to prevent clipping of ylabel
#plt.subplots_adjust(left=0.15)
#plt.show()


def number_of_hops(data):
    """
    Records the number of hops per different CO2
    """
    metal_center_list = range(number_of_metal_centers_user + 1)
    #Separation of different In centers
    In1_center_list = (metal_center_list[:8] + metal_center_list[12:20] +
                       metal_center_list[24:32] + metal_center_list[36:44] +
                       metal_center_list[48:56] + metal_center_list[60:68] +
                       metal_center_list[72:80] + metal_center_list[84:92])
    In2_center_list = (metal_center_list[8:12] + metal_center_list[20:24] +
                       metal_center_list[32:36] + metal_center_list[44:48] +
                       metal_center_list[56:60] + metal_center_list[68:72] +
                       metal_center_list[80:84] + metal_center_list[92:96])
    no_center_item = metal_center_list[96]
    output_file = open('hop_data', 'wb')
    output_file.write('#CO2 number,')
    output_file.write('total hop #i,')
    output_file.write('In1 to In1 hop #,')
    output_file.write('In1 to In2 hop #,')
    output_file.write('In2 to In1 hop #,')
    output_file.write('In2 to In2 hop #,')
    output_file.write('In1/In2 to pore hop #' + '\n')
    CO2_num_list = []
    for CO2_number, CO2 in enumerate(data):
        CO2_num_list.append(CO2_number)
        hop_number = 0
        In_selection = CO2[0][0]
        In1_to_In1_hop_number = 0
        In1_to_In2_hop_number = 0
        In2_to_In1_hop_number = 0
        In2_to_In2_hop_number = 0
        In2_In1_to_pore_hop_number = 0
        #Need to add some if statements for the In center identity
        print CO2
        print In_selection
        for timestep in CO2:
            if In_selection != timestep[0]:
                hop_number += 1
                In_selection = timestep[0]
                print In_selection
                if In_selection in In1_center_list and timestep[0] in In1_center_list:
                    In1_to_In1_hop_number += 1
                elif In_selection in In1_center_list and timestep[0] in In2_center_list:
                    In1_to_In2_hop_number += 1
                elif In_selection in In2_center_list and timestep[0] in In1_center_list:
                    In2_to_In1_hop_number += 1
                elif In_selection in In2_center_list and timestep[0] in In2_center_list:
                    In2_to_In2_hop_number += 1
                else:
                    In2_In1_to_pore_hop_number +=1
        output_file.write(str(CO2_number) + ',' + str(hop_number) + ',' + str(In1_to_In1_hop_number) +
                          ',' + str(In1_to_In2_hop_number) + ',' + str(In2_to_In1_hop_number) + ',' +
                          str(In2_to_In2_hop_number) + ',' + str(In2_In1_to_pore_hop_number) + ',' + '\n')


def record_angles_for_In(data):
    """
    Records the angles of CO2 at each In and bins accordingly to keep a record of
    angles of all CO2 in proximity to a given In
    """
    angle_min = 0
    angle_max = 180
    angle_bin = 180/angle_bins_user
    angle_bins = int(math.ceil((angle_max - angle_min)/angle_bin)) + 1
    metal_center_list = range(number_of_metal_centers_user + 1)
    #Separation of different In centers
    In1_center_list = (metal_center_list[:8] + metal_center_list[12:20]+
                       metal_center_list[24:32] + metal_center_list[36:44] +
                       metal_center_list[48:56] + metal_center_list[60:68] +
                       metal_center_list[72:80] + metal_center_list[84:92])
    In2_center_list = (metal_center_list[8:12] + metal_center_list[20:24] +
                       metal_center_list[32:36] + metal_center_list[44:48] +
                       metal_center_list[56:60] + metal_center_list[68:72] +
                       metal_center_list[80:84] + metal_center_list[92:96])
    no_center_item = metal_center_list[96]

    bins = [0 for i in range(angle_bins)]
    metal_center_dict = dict((metal_center, bins[:])
                             for metal_center in metal_center_list)
    for CO2 in data:
        for timestep in CO2:
            metal_number = timestep[0]
            co2_angle_bin = int((timestep[1]-angle_min)/angle_bin)
            metal_center_dict[metal_number][co2_angle_bin] += 1
    output_file = open('angle_data', 'wb')
    output_file_In1 = open('In1_angle_data', 'wb')
    output_file_In2 = open('In2_angle_data', 'wb')
    output_file_pore = open('pore_angle_data', 'wb')
    output_file.write("#metal center\ bin," +
                      ",".join(["%s" % x for x in range(0, angle_bins, angle_bin)])
                         + "\n")
    output_file_In1.write("#metal center\ bin," +
                          ",".join(["%s" % x for x in range(0, angle_bins, angle_bin)])
                          + "\n")
    output_file_In2.write("#metal center\ bin," +
                          ",".join(["%s" % x for x in range(0, angle_bins, angle_bin)])
                          + "\n")
    output_file_pore.write("#metal center\ bin," +
                           ",".join(["%s" % x for x in range(0, angle_bins, angle_bin)])
                           + "\n")
    In1 = []
    In2 = []
    pore = []
    for key in metal_center_dict:
    #In1 center list accumulation for x, y and z of CO2
        if key in In1_center_list:
            if not In1:
                In1 = metal_center_dict[key]
            else:
                In1 = [x+a for x, a in zip(In1, metal_center_dict[key])]
    #In2 center list accumulation for x, y and z of CO2
        elif key in In2_center_list:
            if not In2:
                In2 = metal_center_dict[key]
            else:
                In2 = [x+a for x, a in zip(In2, metal_center_dict[key])]
    #Center of pore accumulation of x, y and z of CO2
        else:
            pore = metal_center_dict[key]

    In1_string_list = ",".join(str(e) for e in In1)
    In2_string_list = ",".join(str(e) for e in In2)
    pore_string_list = ",".join(str(e) for e in pore)
    In1_plus_angle = 'In1' + "," + In1_string_list
    In2_plus_angle = 'In2' + "," + In2_string_list
    pore_plus_angle = 'pore' + "," + pore_string_list
    output_file.write('%s\n %s\n %s\n' % (In1_plus_angle, In2_plus_angle, pore_plus_angle))
    output_file_In1.write('%s\n' % In1_plus_angle)
    output_file_In2.write('%s\n' % In2_plus_angle)
    output_file_pore.write('%s\n' % pore_plus_angle)


#User adjustable Variables and Stuff
angle_bins_user = 180  # number of bins
number_of_metal_centers_user = 96

#if HISTORY_output is not in the directory, then stop

if os.path.isfile('HISTORY_out.py'):
    sys.path.insert(1, os.getcwd())
    from HISTORY_out import data
#    execfile("/share/scratch/bprovost/YiningWork2014/MD/MIL-68-In/fixed_T_P_MD/3bar/150K/test-adf-code/HISTORY_out.py")
#    print data
    number_of_hops(data)
    record_angles_for_In(data)
else:
    print("output file not found.")
    raise SystemExit

